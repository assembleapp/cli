#!/usr/bin/env ruby

require "json"
require "octokit"
require "rubygems"
require "thor"
require "uri"
require "yaml"
require "httparty"

SCAFFOLDS = [
  "ruby",
  "node",
].freeze

SERVER = "https://908e7088.ngrok.io"
ASSEMBLE_CONFIG_PATH = "#{ENV['HOME']}/.assemble.yml"

class Assemble
  include HTTParty

  base_uri SERVER
end

class MyCLI < Thor
  desc "auth API_KEY", "Authenticate against the Assemble API"
  def auth(key)
    info = user_info(key)

    puts "Authenticated as #{info['handle']}."
    File.write(ASSEMBLE_CONFIG_PATH, { "auth" => { "api_key" => key } }.to_yaml)
    puts "Saved credentials in #{ASSEMBLE_CONFIG_PATH}"
  end

  desc "init BLOCK_NAME SCAFFOLD",
    "Create a new Assemble block from a scaffold"
  def init(blockname, scaffold)
    unless SCAFFOLDS.include?(scaffold)
      quit "Invalid scaffold. Please use one of: #{SCAFFOLDS.inspect}"
    end

    Dir.mktmpdir do |dir|
      `git clone https://github.com/assembleapp/scaffolds.git #{dir}/assemble_scaffolds`
      scaffold_dir = "#{dir}/assemble_scaffolds/#{scaffold}"

      Dir.glob("#{scaffold_dir}/*").each do |file|
        contents = File.read(file)

        updated_contents = contents.
          gsub("$BLOCK_NAME", "#{user_handle}/#{blockname}").
          gsub("$BLOCK_SHORTNAME", blockname).
          gsub("$GIT_URL", "git@github.com:#{user_handle}/#{blockname}")

        File.write(file, updated_contents)
      end

      `cp -r #{scaffold_dir} #{blockname}`
    end
  end

  desc "test", "test the current directory's block locally"
  option :input,
    banner: "<input_file>",
    required: true,
    type: :string
  def test
    unless File.exists?(options[:input])
      quit "Could not find input file #{options[:input]}"
    end

    docker_img_tag = "assemble/#{blockname}"
    build_dir = "."
    container_assemble_dir = "/.assemble"

    build_image(docker_img_tag, build_dir)

    puts "Built image for block"
    puts "Starting block with input:"
    puts JSON.pretty_generate(JSON.parse(File.read(options[:input])))[0..100]

    # Start container
    container = `docker run \
      -d \
      -it \
      -e ASSEMBLE_BLOCK_NAME=#{blockname} \
      -e ASSEMBLE_DIR=#{container_assemble_dir} \
      #{docker_img_tag} \
      /bin/bash`.strip

    # Move assemble-specific files into the container
    `docker exec #{container} mkdir #{container_assemble_dir}`
    `docker cp #{options[:input]} #{container}:#{container_assemble_dir}/input.json`

    # Run the command
    block_assemble_configuration = YAML.parse(File.read("assemble.yml")).to_ruby
    command = block_assemble_configuration["block"]["command"]

    puts "Running `#{command}`"
    puts
    puts `docker exec #{container} #{command}`
    puts

    if `docker exec #{container} ls #{container_assemble_dir}`.split.include?("output.json")
      Dir.mktmpdir do |dir|
        `docker cp #{container}:#{container_assemble_dir}/output.json #{dir}/output.json`
        puts "Output: "
        # puts JSON.pretty_generate(JSON.parse(File.read("#{dir}/output.json")))
        puts File.read("#{dir}/output.json")
      end
    else
      puts "Block did not output any data"
    end

    `docker stop #{container}`
    puts "Done"
  end

  desc "push", "publish the current directory's block to Assemble"
  def push
    check_or_create_git_repo

    repo_name = find_or_create_github_repo

    puts "Notifying #{SERVER}..."
    response = Assemble.post(
      "/blocks",
      body: {
        block: {
          github_repo: repo_name,
          name: blockname,
        }
      },
      headers: headers,
    )
    puts JSON.pretty_generate(JSON.parse(response.body))
    puts

    puts "Block pushed to #{SERVER}"
    puts "View your block at:"
    puts "#{SERVER}/blocks/#{user_handle}/#{blockname}"
    puts
    puts "Run your block with:"
    puts "assemble run_block #{user_handle}/#{blockname} --input input.json"
  end

  desc "run_block BLOCK_NAME", "run a block in the cloud, on the Assemble platform"
  option :input,
    banner: "<input_file>",
    required: true,
    type: :string
  def run_block(block_name)
    unless File.exists?(options[:input])
      quit "Could not find input file #{options[:input]}"
    end

    response = Assemble.post(
      "/blocks/#{block_name}/runs",
      body: { data: JSON.parse(File.read(options[:input])) },
      headers: headers,
    )

    if response.code == 200
      uri = URI.parse(JSON.parse(response.body)['path'])

      poll_block_run(uri)
    else
      puts "Response #{response.code} #{response.message}: #{response.body}"
    end
  end

  private

  def api_key
    assemble_config['auth']['api_key']
  rescue
    # TODO documentation about ~/.assemble.yml format
    quit "Please sign into assemble and store your application api key in `~/.assemble.yml`"
  end

  def assemble_config
    contents = File.read(ASSEMBLE_CONFIG_PATH)
    @assemble_config ||= YAML.parse(contents).to_ruby
  end

  def blockname
    File.basename(FileUtils.pwd)
  end

  def build_image(docker_img_tag, build_dir)
    puts "Building image #{docker_img_tag}..."
    build_output = `docker build -t #{docker_img_tag} #{build_dir}`

    unless build_output =~ /^Successfully built /
      puts "Could not build the image. Please check your Dockerfile for errors."
      puts "BUILD OUTPUT: --------------"
      puts build_output
      quit
    end
  end

  def check_or_create_git_repo
    if `git status`.empty?
      puts "Git repository not found, initializing."
      `git init`
      `git add .`

      `git config --global user.email "cli@assembleapp.co"`
      `git config --global user.name "Assemble"`

      `git commit -m "[init] Create an Assemble block"`
    end
  end

  def headers(key = api_key)
    {
      "Authorization" => "Token token=\"#{key}\"",
      "Accept" => "application/json",
    }
  end

  def find_or_create_github_repo
    repo_name = nil

    remotes = `git remote -v`
    if remotes.include?("github.com")
      puts remotes
      puts "Found an existing GitHub repo at "
      quit "looks like this has already been pushed to GitHub"
      repo_name = "TODO parse from git remote -v"
    else
      repo_name = "#{user_handle}/#{blockname}.block"

      puts "Creating public GitHub repo, #{repo_name}"

      github.create_repository(
        repo_name.split("/").last,
        description: "A block of code that can be run on #{SERVER}",
        homepage: SERVER + "/blocks/#{user_handle}/#{blockname}",
        private: false,
      )

      puts "Pushing block to git@github.com:#{repo_name}.git"
      `git remote add origin git@github.com:#{repo_name}.git`
      `git push -u origin master`

      puts "Your block is now hosted on GitHub at:"
      puts "https://github.com/#{repo_name}"
    end
  end

  def github
    @github ||= Octokit::Client.new(access_token: github_token)
  end

  def github_token
    user_info["github_token"]
  end

  def user_handle
    user_info["handle"]
  end

  def poll_block_run(uri)
    response = Assemble.get(uri, headers: headers)
    response = JSON.parse(response.body)
    print 'pending...'

    while response['status'] == 'pending'
      sleep 1
      print '.'

      response = JSON.parse(Assemble.get(uri, headers: headers).body)
    end

    puts
    puts "Block run completed."
    puts
    puts "STDOUT:" + '-' * 20
    puts response['stdout']
    puts
    puts "STDERR:" + '-' * 20
    puts response['stderr']
    puts
    puts "OUTPUT:" + '-' * 20
    puts response['output']
  end

  def user_info(key = api_key)
    @user_info ||= begin
                     response = Assemble.get(
                       "/user_info",
                       headers: headers(key),
                     )

                     if response.code == 200
                       JSON.parse(response.body)
                     else
                       quit "Invalid api key. Please re-run the `assemble auth` command with your account's api key."
                     end
                   end
  end

  def quit(message)
    puts message
    puts "Exiting."
    exit
  end
end

MyCLI.start(ARGV)
